Typescript - tsc -v
Node - node -v (18)
Npm  - npm -v

Angular
i)latest version   - npm install -g @angular/cli
ii)specific version - npm install -g @angular/cli@10.0.1
iii)uninstall - npm uninstall -g @angular/cli

version checking: ng v / ng version

create app: ng new first-angular-app

cd first-angular-app

start the server: ng serve  / ng serve -o
Angular JS/ Angular:
First version of Angular: Angular JS 1.0 - Javascript - October, 2010
Second Version of Angular: Angular 2.0 - Typescript - 2016

Angular is a open source frontend framework written using typescript.
Angular is maintained by Google.
It is used to create Single Page Application.(SPA)
It is used for mobile and desktop application.
It uses typescript and HTML to build app.
It comes with every feature that you need to create a complex and sophisticated web or mobile application. 
It is component based and modular in nature.
Angular is loaded with features like components, directives, Forms, pipes, HTTP service, Dependency Injection etc.  



index.html

Business - home, aboutus, service, contact us etc.
Component: It is the smallest part of the UI.

Every angular app by default comes with one component and one module.

app module
app component(app.component.ts, app.component.html, app.component.css, app.component.spec.ts)

Module: A module contains related functionalities in the form of
components, directives, pipes etc.


User Authentication
i)Signup
ii)login
iii)authorization
iv)Authentication
v)token generation
vi)forgot password

admin 
i)add product
ii)manage user
iii)allow/block user.


Bootstrapping(loading) process of angular:

i)Loads index.html
ii)Load all the third party libraries and modules.
iii)Excutes application entry point(main.ts).
iv)Load & execute root module.(app.module.ts)
v) Executes the root component.(app.component.ts)
vi)Displays the template of the root component.(app.component.html)

command to create a component:
ng generate component login
ng g c login

Project Structure:
i)node_modules: This folder contains all the trird party libraries and files. This folder is generated when we run "npm install" command.

ii)src: This folder contains all the source code of the project.
It contains modules, components, directives etc.

iii)App : It contains "modules" and "components".
iv)assets: This folder contains all the static resources of the project.
pictures, videos, logos, js libraries, css libraries etc. 
v)favicon : icon of the app.
vi)index.html: The basic html file.
vii)main.ts: It is the starting point of our application. Form this file 
angular comes to know about root module.
viii)style.css: It is the global css file.
ix).editorconfig: Editor configuration like whitespaces or indentation.
x).gitignore: info about files and folders that are need be ignored in git push.

xi)angular.json: It defines the structure of the application.
xii)package.json:It contains npm configuration.All the dependencies are mentioned in this file.
xii)package-lock.json:Wheneven any chages made to the package.json file automatically package-lock.json created. This file is associated with npm.
xiii)Readme.md: It contains project description.
ix) tsconfig.json : It contains compiler configuration.

ng g c login

i)Component without stylesheet
  ng g c a --inline-style
ii)Component without template
  ng g c b --inline-template
iii)Component without template and stylesheet
  ng g c c --inline-template --inline-style


  add new component -> in a module
  new component must be registered with the module

Data Binding:  
Data binding is a technique in which the data stays in sync between the
component and the view(template).

When angular gets new data it updates the view.
wheneven user updates the data in the view, Angular updates the component.
              data
component   <------> view
(.ts)               (.html)

i)One way data binding:
In one way data binding the data flows from view to component or from 
component to view.
    a)Interpolation(String expession/template expression)
     {{expression}}


    b)property binding 
    Property binding is one way as values go from the component to the template.
    When the component value changes, the angular updates the view. But if the value 
    changes in the view, angular does not update the component.

    syntax: [binding-source]=binding-target

    
    c)event binding 
    Event binding allows us to bind events such as keystroke, click, hover, touch etc to a method in the component. 

    syntax: (target-event)="TemplateStatement"



    css style
    d)class binding
    e)style binding
    f)attribute binding
Event: ($event payload)
DOM events carries the event payload i.e. the information about the event.
We can access the event payload by using $event as an argument in the handler function.


ii)Two way data binding:
In two way data binding the changes made to our model in the component are propagated to the view and any changes made in the view are 
immediately updated in the component.
 a)ngModel - directive

 import formsModule

 Two way data binding= event binding + property binding
   ()  + [] = [()]

Directives:
Directives helps us to manipulate the DOM. You can change the appearance, behavior or
layout of the dom element using directive.

i)Structural:Structural directives can change the DOM structure by adding or removing
DOM elements. All structural directives are preceded by Asterix(*) symbol.

ex: *ngFor, *ngIf, *ngSwitch

ngFor: Iterates over a collection of data like an array or list.
ngIf: ngIf is a structural directive that allows us to add or remove element based on condition.
ngSwitch:It is also a structural directive works in conjunction with ngSwitchCase and ngSwitchDefault.

ii)Attribute: Attribute directives helps us to change the appearance or behavior of an element.

ex: ngClass, ngStyle
ngClass: 
iii)Component: Component are special directive in Angular. They are the directive with a template.

ngTemplate: You can define template content that is only rendered by angular.
A
 B

C ---> D



Component communication:
Sharing data from one component to another component.
i)Parent Component to a Child component.(@Input decorator)
ii)Child to a parent component.(@Output, EventEmitter )
iii)Between unrelated component.(Service, subjectBehavior)

EventEmitter: Eventemitter is a tool that allows components to communicate with each other and it plays an important role in managing communication and state within angular application.

there are two ways of detecting when input changes in the child component in Angular
i)Using OnChanges life cycle hook
ii)using Input setter

How to use ngOnChanges for Change Detection
Import the OnChanges interface, SimpleChanges, SimpleChange from @angule/core library.
Implement the ngOnChanges() method. The method receives the SimpleChanges object containing the changes in each input property.

In the child component:

1. Declare a property of type EventEmitter and instantiate it.
2. Mark it with @Output decorator
3. Raise the event passing it with the desired data

In the parent component:
 1. bind to the child component using event binding and listen to the child event
 2. Define the event handler function


 Services:
 Services are reusable business logic that can be used in various components of the application.

 Dependency Injection: It is a desing pattern that helps us to make our code loosly coupled.
       Injectable
 Service -> Component 

 command: ng g s app

 - .ts
 - .spec.ts



ng new second-angular-app

Producer <-> subscriber

BehaviorSubject:
 BehaviorSubjects are types of subject  that 
    i)has an initial value
    ii)Subscribers will receive the last emitted value upon subscription.


Routing: 
Routing allows us to move for one part of the application to another part or from one view to another view.

app-routing.module.ts

Router: An Angular router is a service that enables navigation from one component to another.

Route: Route tells the Angular router which view to display when a user clicks on a particular URL.

/about - aboutComponent
/contact - contactComponent


Routes: Routes is an array of route.

RouterOutlet: It is a directive that works as a placeholder, where the router should display in the view.

RouterLink: it is a directive that binds the html element to the Route.

RouterLinkActive

Activatedroute: The activatedroute is an object that represents the 
currently activated route associated with the loaded component.

snapshot: It is a property that current value of the route.
The snapshot has paramsMap and params array. You can use any of them 
to read the value of id.
RouterState

Parameters:
i)URI parameter
ii)Query/Request Parameter


http://localhost:4200/employee/123
http://abc.com/service/2/emp/6373

http://localhost:4200/employee?name=kunal&email=test@gmail.com&dept=it


{'path':'employee/:id'}
{'path':'/service/:sid/emp/:id'}

routerLink="/employee/3434"

browser url -> component
      
student componet -> employee component


Child routing:
In angular application we can redirect user form parent route to child route through the child routing feature.

A  - /testa 
 B - 
ProductList = /products
 ProductDetails = /details 

 /products/details/:id
products
productDetails


Route guard: protect our routes using route guard.
i)canActivate
ii)canDeactivate

Service class

command: ng generate guard authentication
         ng g g auth 


userDashboard

Angular pipes:The Angular pipes are used to tranform the Data. 

Angular pipes takes data as input and formats  or transform the data to display in the template. We use them to change the appearance of the data before presenting it to the user.

ex: date pipe, currency pipe, number pipe , percent pipe, decimal pipe etc.

backend - raw data - tranform, convert and format - using pipes 

syntax: Expression | pipe opertor[:pipeArguments] 

Expression: is the expression that you want to transform
| : pipe character
pipe opertor: name of the pipe
pipeArguments: agruments to the pipe


Chaning Pipes: Pipes can be chained together  to make use of multiple pipes in one expression.


ex: {{dateObj  | date | uppercase}} 


{{number_expresion | number[:digitInfo]}}

9542.12554
[minIntegerdigits].[minFractionDigits]-[maxFractionDigits]
{{num | number:'3.1-2'}} -> 9,542.13
{{num | number:'7.1-5'}} -> 0,009,542.12554


Angular forms:
Angular forms are used to collect the data from the user.

some things froms are expected to do:

 i)Initialize the forms and present it to the user.
 ii)Capture the data from the user.
 iii)Track changes made to the fields.
 iv)Validate the input.
 vi)Display helpful errors to the user.

 Angualar forms:

 i)Template driven form- formsModule
 It is the easiest way to build Angular forms.The logic of the form is written in the templete itself. It suitable for simple and small forms. 

 ii)Model driven form / reactive form- reactiveModule
  It is suitable for long and complex forms where lots of input fields are available and complex validation needs to be implemented. 

  Building Blocks of Angular Forms:
  The Angular forms consists of three main building blocks.

  FormControl: A FormControl reprensents a single input field in an Angular form.

  ex:  First name:<input type="text" name="firstName" >
      middle name:<input type="text" name="middleName" >
      let firstName=new FormControl();
      let middleName=new FormControl();   


  FormGroup: FormGroup is a collection of FormControls.
  
  ex:  city:<input type="text" name="city" >
       Street:<input type="text" name="street" >
       pincode:<input type="text" name="pincode" >

 let address=new FormGroup(
    city=new FormControl(""),
    street=new FormControl(""),
    pincode=new FormControl("")
 );

  FormArray: FormArray is an array of formControls.  
 In Formarray each formControl is an element and in formGroup each formControl is a property. 
 

 skillsForm:FormGroup;
 this.skillForm=this.test.group(
  name:'',
  skills: this.test.array([])
  }
 );


 get skills():FormArray{
return this.skillsForm.get("skills") as Formarray
 }

 Reactive Form
 API & Rest web Serveices
 Test Rest services(Postman tool)
 Consume Rest web services(POST, GET, PATCH, PUT, DELETE)

Form states:
ANgular form control states describe the state of a form control.


Pristine : The user has not modified the form control
Dirty : The user has modified the form control.
Touched: The user has interacted with the form control, ex: by clicking or fucusing etc.
Untouched: The user has not interacted with the form control.
Valid: The form control's value meets the validation rules defined.
Invalid: The form control's value does not meet the validation rules defined.


?. - Save Navigation Operator 

It can be used with form properties to prevent Angular from throwing errors when trying to access object properties of an object does not exist.


 API & Rest web Services:

 API: Application Programming Interface.
 Two different software systems/apps can communicate to each other over the internet using a common data exchange format.

 JSON/XML 

 i)SOAP (Traditional web service) - Simple Object Access Protocol - XML
 ii)REST API

 Representational State Transfer(REST)

 HTTP response codes;
 1XX - INFORMATION
 2xx - SUCCESS
 3xx - REDIRECTION
 4xx - CLENT ERROR
 5xx - SERVER SIDE ERROR

 HTTP request format 
 HTTP response format

 REACT - frontend js library used for frontend development. - Facebook
 PHP - Serverside language - used for the backend development. 

 HttpClient - Module - import in app.module.ts
 Service class - ng g s user - Provider - Observable

 need to subscribe to the observable

 Component - Consumer(Observer)

 Observable: Provider
 Observables helps to manage async data. We can think of observable as an array of items, which arrives asynchronously over time.

 Observables maintains a list of dependents. We call these dependents as Observers. 
 When an Observer subscribe to an observable, it needs to pass three callback methods.
 These are next(), error(), and complete()  .
 The observable invokes the next() callback, when it receives a value. 
 When the observable completes it ivokes the complete() callback.
 And when the errors occurs it invokes the error() callback.   

 Observer: Consumer

 POST - create a new resource
 PATCH - partialy update
 PUT - completely update a resource 
 DELETE - delete a resource

user

 adduser

 ng g s user



















