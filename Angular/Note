Typescript - tsc -v
Node - node -v (18)
Npm  - npm -v

Angular
i)latest version   - npm install -g @angular/cli
ii)specific version - npm install -g @angular/cli@10.0.1
iii)uninstall - npm uninstall -g @angular/cli

version checking: ng v / ng version

create app: ng new first-angular-app

cd first-angular-app

start the server: ng serve  / ng serve -o
Angular JS/ Angular:
First version of Angular: Angular JS 1.0 - Javascript - October, 2010
Second Version of Angular: Angular 2.0 - Typescript - 2016

Angular is a open source frontend framework written using typescript.
Angular is maintained by Google.
It is used to create Single Page Application.(SPA)
It is used for mobile and desktop application.
It uses typescript and HTML to build app.
It comes with every feature that you need to create a complex and sophisticated web or mobile application. 
It is component based and modular in nature.
Angular is loaded with features like components, directives, Forms, pipes, HTTP service, Dependency Injection etc.  



index.html

Business - home, aboutus, service, contact us etc.
Component: It is the smallest part of the UI.

Every angular app by default comes with one component and one module.

app module
app component(app.component.ts, app.component.html, app.component.css, app.component.spec.ts)

Module: A module contains related functionalities in the form of
components, directives, pipes etc.


User Authentication
i)Signup
ii)login
iii)authorization
iv)Authentication
v)token generation
vi)forgot password

admin 
i)add product
ii)manage user
iii)allow/block user.


Bootstrapping(loading) process of angular:

i)Loads index.html
ii)Load all the third party libraries and modules.
iii)Excutes application entry point(main.ts).
iv)Load & execute root module.(app.module.ts)
v) Executes the root component.(app.component.ts)
vi)Displays the template of the root component.(app.component.html)

command to create a component:
ng generate component login
ng g c login

Project Structure:
i)node_modules: This folder contains all the trird party libraries and files. This folder is generated when we run "npm install" command.

ii)src: This folder contains all the source code of the project.
It contains modules, components, directives etc.

iii)App : It contains "modules" and "components".
iv)assets: This folder contains all the static resources of the project.
pictures, videos, logos, js libraries, css libraries etc. 
v)favicon : icon of the app.
vi)index.html: The basic html file.
vii)main.ts: It is the starting point of our application. Form this file 
angular comes to know about root module.
viii)style.css: It is the global css file.
ix).editorconfig: Editor configuration like whitespaces or indentation.
x).gitignore: info about files and folders that are need be ignored in git push.

xi)angular.json: It defines the structure of the application.
xii)package.json:It contains npm configuration.All the dependencies are mentioned in this file.
xii)package-lock.json:Wheneven any chages made to the package.json file automatically package-lock.json created. This file is associated with npm.
xiii)Readme.md: It contains project description.
ix) tsconfig.json : It contains compiler configuration.

ng g c login

i)Component without stylesheet
  ng g c a --inline-style
ii)Component without template
  ng g c b --inline-template
iii)Component without template and stylesheet
  ng g c c --inline-template --inline-style


  add new component -> in a module
  new component must be registered with the module

Data Binding:  
Data binding is a technique in which the data stays in sync between the
component and the view(template).

When angular gets new data it updates the view.
wheneven user updates the data in the view, Angular updates the component.
              data
component   <------> view
(.ts)               (.html)

i)One way data binding:
In one way data binding the data flows from view to component or from 
component to view.
    a)Interpolation(String expession/template expression)
     {{expression}}


    b)property binding 
    Property binding is one way as values go from the component to the template.
    When the component value changes, the angular updates the view. But if the value 
    changes in the view, angular does not update the component.

    syntax: [binding-source]=binding-target

    
    c)event binding 
    Event binding allows us to bind events such as keystroke, click, hover, touch etc to a method in the component. 

    syntax: (target-event)="TemplateStatement"



    css style
    d)class binding
    e)style binding
    f)attribute binding
Event: ($event payload)
DOM events carries the event payload i.e. the information about the event.
We can access the event payload by using $event as an argument in the handler function.


ii)Two way data binding:
In two way data binding the changes made to our model in the component are propagated to the view and any changes made in the view are 
immediately updated in the component.
 a)ngModel - directive

 import formsModule

 Two way data binding= event binding + property binding
   ()  + [] = [()]

Directives:
Directives helps us to manipulate the DOM. You can change the appearance, behavior or
layout of the dom element using directive.

i)Structural:Structural directives can change the DOM structure by adding or removing
DOM elements. All structural directives are preceded by Asterix(*) symbol.

ex: *ngFor, *ngIf, *ngSwitch

ngFor: Iterates over a collection of data like an array or list.
ngIf: ngIf is a structural directive that allows us to add or remove element based on condition.
ngSwitch:It is also a structural directive works in conjunction with ngSwitchCase and ngSwitchDefault.

ii)Attribute: Attribute directives helps us to change the appearance or behavior of an element.

ex: ngClass, ngStyle
ngClass: 
iii)Component: Component are special directive in Angular. They are the directive with a template.

ngTemplate: You can define template content that is only rendered by angular.
A
 B

C ---> D



Component communication:
Sharing data from one component to another component.
i)Parent Component to a Child component.(@Input decorator)
ii)Child to a parent component.(@Output, EventEmitter )
iii)Between unrelated component.(Service, subjectBehavior)

EventEmitter: Eventemitter is a tool that allows components to communicate with each other and it plays an important role in managing communication and state within angular application.

there are two ways of detecting when input changes in the child component in Angular
i)Using OnChanges life cycle hook
ii)using Input setter

How to use ngOnChanges for Change Detection
Import the OnChanges interface, SimpleChanges, SimpleChange from @angule/core library.
Implement the ngOnChanges() method. The method receives the SimpleChanges object containing the changes in each input property.

In the child component:

1. Declare a property of type EventEmitter and instantiate it.
2. Mark it with @Output decorator
3. Raise the event passing it with the desired data

In the parent component:
 1. bind to the child component using event binding and listen to the child event
 2. Define the event handler function










